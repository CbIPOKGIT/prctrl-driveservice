// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: driveservice/service.proto

package driveservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DriveService_FilesList_FullMethodName = "/DriveService/FilesList"
	DriveService_Upload_FullMethodName    = "/DriveService/Upload"
	DriveService_Download_FullMethodName  = "/DriveService/Download"
)

// DriveServiceClient is the client API for DriveService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DriveServiceClient interface {
	FilesList(ctx context.Context, in *FileInfo, opts ...grpc.CallOption) (*FilesInfo, error)
	Upload(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*FileInfo, error)
	Download(ctx context.Context, in *FileInfo, opts ...grpc.CallOption) (*FileContent, error)
}

type driveServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDriveServiceClient(cc grpc.ClientConnInterface) DriveServiceClient {
	return &driveServiceClient{cc}
}

func (c *driveServiceClient) FilesList(ctx context.Context, in *FileInfo, opts ...grpc.CallOption) (*FilesInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FilesInfo)
	err := c.cc.Invoke(ctx, DriveService_FilesList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driveServiceClient) Upload(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*FileInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileInfo)
	err := c.cc.Invoke(ctx, DriveService_Upload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driveServiceClient) Download(ctx context.Context, in *FileInfo, opts ...grpc.CallOption) (*FileContent, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileContent)
	err := c.cc.Invoke(ctx, DriveService_Download_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DriveServiceServer is the server API for DriveService service.
// All implementations must embed UnimplementedDriveServiceServer
// for forward compatibility.
type DriveServiceServer interface {
	FilesList(context.Context, *FileInfo) (*FilesInfo, error)
	Upload(context.Context, *UploadRequest) (*FileInfo, error)
	Download(context.Context, *FileInfo) (*FileContent, error)
	mustEmbedUnimplementedDriveServiceServer()
}

// UnimplementedDriveServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDriveServiceServer struct{}

func (UnimplementedDriveServiceServer) FilesList(context.Context, *FileInfo) (*FilesInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilesList not implemented")
}
func (UnimplementedDriveServiceServer) Upload(context.Context, *UploadRequest) (*FileInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedDriveServiceServer) Download(context.Context, *FileInfo) (*FileContent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (UnimplementedDriveServiceServer) mustEmbedUnimplementedDriveServiceServer() {}
func (UnimplementedDriveServiceServer) testEmbeddedByValue()                      {}

// UnsafeDriveServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DriveServiceServer will
// result in compilation errors.
type UnsafeDriveServiceServer interface {
	mustEmbedUnimplementedDriveServiceServer()
}

func RegisterDriveServiceServer(s grpc.ServiceRegistrar, srv DriveServiceServer) {
	// If the following call pancis, it indicates UnimplementedDriveServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DriveService_ServiceDesc, srv)
}

func _DriveService_FilesList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriveServiceServer).FilesList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DriveService_FilesList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriveServiceServer).FilesList(ctx, req.(*FileInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriveService_Upload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriveServiceServer).Upload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DriveService_Upload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriveServiceServer).Upload(ctx, req.(*UploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriveService_Download_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriveServiceServer).Download(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DriveService_Download_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriveServiceServer).Download(ctx, req.(*FileInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// DriveService_ServiceDesc is the grpc.ServiceDesc for DriveService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DriveService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DriveService",
	HandlerType: (*DriveServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FilesList",
			Handler:    _DriveService_FilesList_Handler,
		},
		{
			MethodName: "Upload",
			Handler:    _DriveService_Upload_Handler,
		},
		{
			MethodName: "Download",
			Handler:    _DriveService_Download_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "driveservice/service.proto",
}
